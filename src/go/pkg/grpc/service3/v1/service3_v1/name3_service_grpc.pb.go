// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: service3_v1/name3_service.proto

package pkgname_v1

import (
	context "context"
	v1 "github.com/DoktorGhost/tristate/pkg/grpc/cmm/v1"
	v11 "github.com/DoktorGhost/tristate/pkg/grpc/cmm2/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service1_GetHello1_FullMethodName = "/pkgname.Service1/GetHello1"
)

// Service1Client is the client API for Service1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service1Client interface {
	GetHello1(ctx context.Context, in *v1.MessageData, opts ...grpc.CallOption) (*v11.Unnamed, error)
}

type service1Client struct {
	cc grpc.ClientConnInterface
}

func NewService1Client(cc grpc.ClientConnInterface) Service1Client {
	return &service1Client{cc}
}

func (c *service1Client) GetHello1(ctx context.Context, in *v1.MessageData, opts ...grpc.CallOption) (*v11.Unnamed, error) {
	out := new(v11.Unnamed)
	err := c.cc.Invoke(ctx, Service1_GetHello1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service1Server is the server API for Service1 service.
// All implementations must embed UnimplementedService1Server
// for forward compatibility
type Service1Server interface {
	GetHello1(context.Context, *v1.MessageData) (*v11.Unnamed, error)
	mustEmbedUnimplementedService1Server()
}

// UnimplementedService1Server must be embedded to have forward compatible implementations.
type UnimplementedService1Server struct {
}

func (UnimplementedService1Server) GetHello1(context.Context, *v1.MessageData) (*v11.Unnamed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello1 not implemented")
}
func (UnimplementedService1Server) mustEmbedUnimplementedService1Server() {}

// UnsafeService1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service1Server will
// result in compilation errors.
type UnsafeService1Server interface {
	mustEmbedUnimplementedService1Server()
}

func RegisterService1Server(s grpc.ServiceRegistrar, srv Service1Server) {
	s.RegisterService(&Service1_ServiceDesc, srv)
}

func _Service1_GetHello1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MessageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service1Server).GetHello1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service1_GetHello1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service1Server).GetHello1(ctx, req.(*v1.MessageData))
	}
	return interceptor(ctx, in, info, handler)
}

// Service1_ServiceDesc is the grpc.ServiceDesc for Service1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkgname.Service1",
	HandlerType: (*Service1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello1",
			Handler:    _Service1_GetHello1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service3_v1/name3_service.proto",
}

const (
	Service2_GetHello2_FullMethodName = "/pkgname.Service2/GetHello2"
)

// Service2Client is the client API for Service2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service2Client interface {
	GetHello2(ctx context.Context, in *v11.Unnamed, opts ...grpc.CallOption) (*v1.MessageData, error)
}

type service2Client struct {
	cc grpc.ClientConnInterface
}

func NewService2Client(cc grpc.ClientConnInterface) Service2Client {
	return &service2Client{cc}
}

func (c *service2Client) GetHello2(ctx context.Context, in *v11.Unnamed, opts ...grpc.CallOption) (*v1.MessageData, error) {
	out := new(v1.MessageData)
	err := c.cc.Invoke(ctx, Service2_GetHello2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service2Server is the server API for Service2 service.
// All implementations must embed UnimplementedService2Server
// for forward compatibility
type Service2Server interface {
	GetHello2(context.Context, *v11.Unnamed) (*v1.MessageData, error)
	mustEmbedUnimplementedService2Server()
}

// UnimplementedService2Server must be embedded to have forward compatible implementations.
type UnimplementedService2Server struct {
}

func (UnimplementedService2Server) GetHello2(context.Context, *v11.Unnamed) (*v1.MessageData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello2 not implemented")
}
func (UnimplementedService2Server) mustEmbedUnimplementedService2Server() {}

// UnsafeService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service2Server will
// result in compilation errors.
type UnsafeService2Server interface {
	mustEmbedUnimplementedService2Server()
}

func RegisterService2Server(s grpc.ServiceRegistrar, srv Service2Server) {
	s.RegisterService(&Service2_ServiceDesc, srv)
}

func _Service2_GetHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.Unnamed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service2Server).GetHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service2_GetHello2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service2Server).GetHello2(ctx, req.(*v11.Unnamed))
	}
	return interceptor(ctx, in, info, handler)
}

// Service2_ServiceDesc is the grpc.ServiceDesc for Service2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkgname.Service2",
	HandlerType: (*Service2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello2",
			Handler:    _Service2_GetHello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service3_v1/name3_service.proto",
}
